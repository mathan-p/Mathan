Problem Statement 2: Build Command-Line Product Management
Application using Hibernate
Hibernate.cfg.xml :
<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN" http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd>  
<hibernate-configuration>  
<session-factory>  
<!-- JDBC Database connection settings -->  
<property name="hibernate.connection.driver_class">com.mysql.cj.jdbc.Driver</property>  
<property name="hibernate.connection.url">jdbc:mysql://localhost:3306/productdb</property>  
<property name="hibernate.connection.username">root</property>  
<property name="hibernate.connection.password">Password@12</property>  
<!-- Specify dialect -->  
<property name="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</property>  
<!-- Enable Hibernate's automatic session context management -->  
<property name="hibernate.current_session_context_class">thread</property>  
<!-- Echo all executed SQL to stdout -->  
<property name="hibernate.show_sql">true</property>  
<!-- Drop and re-create the database schema on startup -->  
<property name="hibernate.hbm2ddl.auto">update</property>  
<!-- Names the annotated entity class -->  
<mapping class="com.mphasis.domain.Product"/>  
</session-factory>  
</hibernate-configuration>
 
pom.xml :
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0http://maven.apache.org/xsd/maven-4.0.0.xsd">  
<modelVersion>4.0.0</modelVersion>  
<groupId>java</groupId>  
<artifactId>lensk</artifactId>  
<version>0.0.1-SNAPSHOT</version>  
<packaging>jar</packaging>  
<name>lensk</name>  
<url>http://maven.apache.org</url>  
<properties>  
<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  
</properties>  
<dependencies>  
	<dependency>  
<groupId>javax.validation</groupId>  
<artifactId>validation-api</artifactId>  
<version>2.0.1.Final</version>  
</dependency>  
	<dependency>  
<groupId>org.hibernate</groupId>  
<artifactId>hibernate-core</artifactId>  
<version>5.6.14.Final</version>  
</dependency>  
<dependency>  
<groupId>junit</groupId>  
<artifactId>junit</artifactId>  
<version>3.8.1</version>  
<scope>test</scope>  
</dependency>  
<dependency>  
<groupId>mysql</groupId>  
<artifactId>mysql-connector-java</artifactId>  
<version>8.0.30</version>  
</dependency>  
</dependencies>  
</project>
 
ProductManagementDAO:
 
import com.mphasis.dbutil.HibernateUtil;  
import com.mphasis.domain.Product;  
import org.hibernate.Session;  
import org.hibernate.Transaction;  
import java.util.List;  
public class ProductManagementDAO {  
public void addProduct(Product product) {  
Session session = HibernateUtil.getSessionFactory().openSession();  
Transaction tx = null;  
try {  
tx = session.beginTransaction();  
session.save(product);  
tx.commit();  
} catch (Exception e) {  
if (tx != null) tx.rollback();  
e.printStackTrace();  
} finally {  
session.close();  
}  
}  
public void updateProduct(Product product) {  
Session session = HibernateUtil.getSessionFactory().openSession();  
Transaction tx = null;  
try {  
tx = session.beginTransaction();  
session.update(product);  
tx.commit();  
} catch (Exception e) {  
if (tx != null) tx.rollback();  
e.printStackTrace();  
} finally {  
session.close();  
}  
}  
public void deleteProduct(int productId) {  
Session session = HibernateUtil.getSessionFactory().openSession();  
Transaction tx = null;  
try {  
tx = session.beginTransaction();  
Product product = session.get(Product.class, productId);  
if (product != null) {  
session.delete(product);  
}  
tx.commit();  
} catch (Exception e) {  
if (tx != null) tx.rollback();  
e.printStackTrace();  
} finally {  
session.close();  
}  
}  
public Product getProduct(int productId) {  
Session session = HibernateUtil.getSessionFactory().openSession();  
Product product = null;  
try {  
product = session.get(Product.class, productId);  
} finally {  
session.close();  
}  
return product;  
}  
public List<Product> listProducts() {  
Session session = HibernateUtil.getSessionFactory().openSession();  
List<Product> products = null;  
try {  
products = session.createQuery("from Product", Product.class).list();  
} finally {  
session.close();  
}  
return products;  
}  
} 
 
Product.java :
import javax.persistence.Entity;  
import javax.persistence.GeneratedValue;  
import javax.persistence.GenerationType;  
import javax.persistence.Id;  
import javax.persistence.Table;  
@Entity  
@Table(name = "product")  
public class Product {  
@Id  
@GeneratedValue(strategy = GenerationType.IDENTITY)  
private int productId;  
private String productName;  
private double productPrice;  
// Getters and Setters  
public int getProductId() {  
return productId;  
}  
public void setProductId(int productId) {  
this.productId = productId;  
}  
public String getProductName() {  
return productName;  
}  
public void setProductName(String productName) {  
this.productName = productName;  
}  
public double getProductPrice() {  
return productPrice;  
}  
public void setProductPrice(double productPrice) {  
this.productPrice = productPrice;  
}  
@Override  
public String toString() {  
return "Product [productId=" + productId + ", productName=" + productName + ", productPrice=" + productPrice + "]";  
}  
}
 
ProductManagementApp:
 
import com.mphasis.dao.ProductManagementDAO;  
import com.mphasis.dbutil.HibernateUtil;  
import com.mphasis.domain.Product;  
import java.util.List;  
import java.util.Scanner;  
public class ProductManagementApp {  
private static ProductManagementDAO dao = new ProductManagementDAO();  
private static Scanner scanner = new Scanner(System.in);  
public static void main(String[] args) {  
while (true) {  
System.out.println("Product Management Application");  
System.out.println("A. View Products");  
System.out.println("B. Add Product");  
System.out.println("C. Update Product");  
System.out.println("D. Delete Product");  
System.out.println("E. Search Product");  
System.out.println("F. Exit");  
System.out.print("Enter your choice: ");  
String choice = scanner.nextLine().toUpperCase();  
switch (choice) {  
case "A":  
viewProducts();  
break;  
case "B":  
addProduct();  
break;  
case "C":  
updateProduct();  
break;  
case "D":  
deleteProduct();  
break;  
case "E":  
searchProduct();  
break;  
case "F":  
System.out.println("Exiting...");  
HibernateUtil.shutdown();  
System.exit(0);  
break;  
default:  
System.out.println("Invalid choice, please try again.");  
}  
}  
}  
private static void viewProducts() {  
List<Product> products = dao.listProducts();  
for (Product product : products) {  
System.out.println(product);  
}  
}  
private static void addProduct() {  
System.out.print("Enter product name: ");  
String name = scanner.nextLine();  
System.out.print("Enter product price: ");  
double price = Double.parseDouble(scanner.nextLine());  
Product product = new Product();  
product.setProductName(name);  
product.setProductPrice(price);  
dao.addProduct(product);  
System.out.println("Product added successfully.");  
}  
private static void updateProduct() {  
System.out.print("Enter product ID to update: ");  
int id = Integer.parseInt(scanner.nextLine());  
Product product = dao.getProduct(id);  
if (product != null) {  
System.out.print("Enter new product name: ");  
String name = scanner.nextLine();  
System.out.print("Enter new product price: ");  
double price = Double.parseDouble(scanner.nextLine());  
product.setProductName(name);  
product.setProductPrice(price);  
dao.updateProduct(product);  
System.out.println("Product updated successfully.");  
} else {  
System.out.println("Product not found.");  
}  
}  
private static void deleteProduct() {  
System.out.print("Enter product ID to delete: ");  
int id = Integer.parseInt(scanner.nextLine());  
dao.deleteProduct(id);  
System.out.println("Product deleted successfully.");  
}  
private static void searchProduct() {  
System.out.print("Enter product ID to search: ");  
int id = Integer.parseInt(scanner.nextLine());  
Product product = dao.getProduct(id);  
if (product != null) {  
System.out.println("Product found: " + product);  
} else {  
System.out.println("Product not found.");  
}  
}  
}
